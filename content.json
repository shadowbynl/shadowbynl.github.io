{"meta":{"title":"Memory","subtitle":"永远相信美好的事情即将发生","description":null,"author":"nlby","url":"https://shadowbynl.github.io","root":"/"},"pages":[{"title":"文章归档","date":"2021-08-28T04:29:51.390Z","updated":"2021-08-28T04:22:33.454Z","comments":true,"path":"archive.html","permalink":"https://shadowbynl.github.io/archive.html","excerpt":"","text":""}],"posts":[{"title":"2021年9月保研结束后总结","slug":"202109summary","date":"2021-09-28T14:48:19.000Z","updated":"2021-09-28T15:04:03.458Z","comments":true,"path":"2021/09/28/202109summary/","link":"","permalink":"https://shadowbynl.github.io/2021/09/28/202109summary/","excerpt":"","text":"不多说了，勉强上个学，夏令营后两个月基本没有做保研相关的准备，拿到现在的结果也算是将就吧，之后的路就全看自己把握了。充足的写代码时间，自学时间，和短期的与长期的找工作的目标，将是我未来三年内的主题。未来的半年内，实习，毕设，写代码，学英语，深化对计算机知识的理解，尝试一些事，为研究生打工做准备，锻炼身体。。所有一切需要足够的自律和坚定的信念。这是一个新的起点，与我竞争的不单单是同校同专业的同学，更是全国千千万万学历或高或低经验或多或少的相关从业者。在这行立足，并做久，需要我持续慎重思考并践行。总会有遗憾，但要努力让自己以后不要做会让未来后悔的事。现在我的路已经很明确了。 目标10.8 前1 步入正轨 按920的安排进行2 做简历，准备投递（目标，了解）3 了解之后研究生的规划安排/情况（小概率考虑其他导师）","categories":[],"tags":[]},{"title":"npm相关环境","slug":"env-npm","date":"2021-09-22T01:42:20.000Z","updated":"2021-09-28T14:42:12.996Z","comments":true,"path":"2021/09/22/env-npm/","link":"","permalink":"https://shadowbynl.github.io/2021/09/22/env-npm/","excerpt":"","text":"npm查看全局安装过的包npm list -g –depth 0https://www.cnblogs.com/zhou-135/articles/11816745.html","categories":[],"tags":[]},{"title":"nk社区","slug":"pro-00","date":"2021-09-21T12:21:15.000Z","updated":"2021-09-28T14:41:24.829Z","comments":true,"path":"2021/09/21/pro-00/","link":"","permalink":"https://shadowbynl.github.io/2021/09/21/pro-00/","excerpt":"","text":"nk社区 1 首页 2 登录模块 3 核心功能 nk社区（编写） 0 框架与环境 0-1 框架 0-2 数据库 1 基本环境 2 登录模块 nk社区1 首页123456789101112131415161718192021222324252627用户实体帖子实体帖子mapper1 （分页）查询帖子（用户id）2 查询帖子数量关于帖子关联的用户名的问题，采用得到帖子后，再查询的方式，不在mapper中统一关联查询，因此需要提供查询用户（id)的方法静态资源 static模板文件 templatesHomeController返回帖子-用户的键值列表首页渲染 帖子列表分页功能分页实体 方法 使用page实体 处理逻辑首页 分页实现项目调试技巧f8 7 9 日志默认logbacklogback-spring.xml 2 登录模块2-1 发送邮件12345678• 邮箱设置- 启用客户端SMTP服务• Spring Email- 导入 jar 包- 邮箱参数配置- 使用 JavaMailSender 发送邮件• 模板引擎- 使用 Thymeleaf 发送 HTML 邮件 2-2 开发注册功能12345678• 访问注册页面- 点击顶部区域内的链接，打开注册页面。• 提交注册数据- 通过表单提交数据。- 服务端验证账号是否已存在、邮箱是否已注册。- 服务端发送激活邮件。• 激活注册账号- 点击邮件中的链接，访问服务端的激活服务 拆解为三次请求 1234567首页跳转至注册页 首部的复用两个工具类 生成uuid md加盐加密注册业务 判空 验证账号 验证邮箱 注册用户 激活邮件注册controller 成功后到执行成功页注册页面 注册失败后跳回还需要留存信息th:value激活注册账号（邮箱链接）三种结果--常量类 激活业务激活controller 登录模板 代码首页跳转至注册页 首部的复用@GetMapping(&quot;/register&quot;)public String getRegisterPage() &#123; return &quot;/site/register&quot;;&#125;th:fragment=&quot;header&quot;th:href=&quot;@&#123;/index&#125;&quot;th:replace=&quot;index::header&quot;# 两个工具类 生成uuid md加盐加密&lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt; &lt;version&gt;3.9&lt;/version&gt;&lt;/dependency&gt;// 生成随机字符串public static String generateUUID() &#123; return UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;);&#125;// MD5加密// hello -&gt; abc123def456// hello + 3e4a8 -&gt; abc123def456abcpublic static String md5(String key) &#123; if (StringUtils.isBlank(key)) &#123; return null; &#125; return DigestUtils.md5DigestAsHex(key.getBytes());&#125;# 注册业务 判空 验证账号 验证邮箱 注册用户 激活邮件@Servicepublic class UserService implements CommunityConstant &#123; @Autowired private UserMapper userMapper; @Autowired private MailClient mailClient; @Autowired private TemplateEngine templateEngine; @Value(&quot;$&#123;community.path.domain&#125;&quot;) private String domain; @Value(&quot;$&#123;server.servlet.context-path&#125;&quot;) private String contextPath; public User findUserById(int id) &#123; return userMapper.selectById(id); &#125; public Map&lt;String, Object&gt; register(User user) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); // 空值处理 if (user == null) &#123; throw new IllegalArgumentException(&quot;参数不能为空!&quot;); &#125; if (StringUtils.isBlank(user.getUsername())) &#123; map.put(&quot;usernameMsg&quot;, &quot;账号不能为空!&quot;); return map; &#125; if (StringUtils.isBlank(user.getPassword())) &#123; map.put(&quot;passwordMsg&quot;, &quot;密码不能为空!&quot;); return map; &#125; if (StringUtils.isBlank(user.getEmail())) &#123; map.put(&quot;emailMsg&quot;, &quot;邮箱不能为空!&quot;); return map; &#125; // 验证账号 User u = userMapper.selectByName(user.getUsername()); if (u != null) &#123; map.put(&quot;usernameMsg&quot;, &quot;该账号已存在!&quot;); return map; &#125; // 验证邮箱 u = userMapper.selectByEmail(user.getEmail()); if (u != null) &#123; map.put(&quot;emailMsg&quot;, &quot;该邮箱已被注册!&quot;); return map; &#125; // 注册用户 user.setSalt(CommunityUtil.generateUUID().substring(0, 5)); user.setPassword(CommunityUtil.md5(user.getPassword() + user.getSalt())); user.setType(0); user.setStatus(0); user.setActivationCode(CommunityUtil.generateUUID()); user.setHeaderUrl(String.format(&quot;http://images.nowcoder.com/head/%dt.png&quot;, new Random().nextInt(1000))); user.setCreateTime(new Date()); userMapper.insertUser(user); // 激活邮件 Context context = new Context(); context.setVariable(&quot;email&quot;, user.getEmail()); // http://localhost:8080/community/activation/101/code String url = domain + contextPath + &quot;/activation/&quot; + user.getId() + &quot;/&quot; + user.getActivationCode(); context.setVariable(&quot;url&quot;, url); String content = templateEngine.process(&quot;/mail/activation&quot;, context); mailClient.sendMail(user.getEmail(), &quot;激活账号&quot;, content); return map; &#125; public int activation(int userId, String code) &#123; User user = userMapper.selectById(userId); if (user.getStatus() == 1) &#123; return ACTIVATION_REPEAT; &#125; else if (user.getActivationCode().equals(code)) &#123; userMapper.updateStatus(userId, 1); return ACTIVATION_SUCCESS; &#125; else &#123; return ACTIVATION_FAILURE; &#125; &#125;&#125;# 注册controller 成功后到执行成功页@Controllerpublic class LoginController implements CommunityConstant &#123; @Autowired private UserService userService; @RequestMapping(path = &quot;/register&quot;, method = RequestMethod.GET) public String getRegisterPage() &#123; return &quot;/site/register&quot;; &#125; @RequestMapping(path = &quot;/login&quot;, method = RequestMethod.GET) public String getLoginPage() &#123; return &quot;/site/login&quot;; &#125; @RequestMapping(path = &quot;/register&quot;, method = RequestMethod.POST) public String register(Model model, User user) &#123; Map&lt;String, Object&gt; map = userService.register(user); if (map == null || map.isEmpty()) &#123; model.addAttribute(&quot;msg&quot;, &quot;注册成功,我们已经向您的邮箱发送了一封激活邮件,请尽快激活!&quot;); model.addAttribute(&quot;target&quot;, &quot;/index&quot;); return &quot;/site/operate-result&quot;; &#125; else &#123; model.addAttribute(&quot;usernameMsg&quot;, map.get(&quot;usernameMsg&quot;)); model.addAttribute(&quot;passwordMsg&quot;, map.get(&quot;passwordMsg&quot;)); model.addAttribute(&quot;emailMsg&quot;, map.get(&quot;emailMsg&quot;)); return &quot;/site/register&quot;; &#125; &#125; // http://localhost:8080/community/activation/101/code @RequestMapping(path = &quot;/activation/&#123;userId&#125;/&#123;code&#125;&quot;, method = RequestMethod.GET) public String activation(Model model, @PathVariable(&quot;userId&quot;) int userId, @PathVariable(&quot;code&quot;) String code) &#123; int result = userService.activation(userId, code); if (result == ACTIVATION_SUCCESS) &#123; model.addAttribute(&quot;msg&quot;, &quot;激活成功,您的账号已经可以正常使用了!&quot;); model.addAttribute(&quot;target&quot;, &quot;/login&quot;); &#125; else if (result == ACTIVATION_REPEAT) &#123; model.addAttribute(&quot;msg&quot;, &quot;无效操作,该账号已经激活过了!&quot;); model.addAttribute(&quot;target&quot;, &quot;/index&quot;); &#125; else &#123; model.addAttribute(&quot;msg&quot;, &quot;激活失败,您提供的激活码不正确!&quot;); model.addAttribute(&quot;target&quot;, &quot;/index&quot;); &#125; return &quot;/site/operate-result&quot;; &#125;&#125;# 注册页面 注册失败后跳回还需要留存信息th:value&lt;!-- 内容 --&gt;&lt;div class=&quot;main&quot;&gt; &lt;div class=&quot;container pl-5 pr-5 pt-3 pb-3 mt-3 mb-3&quot;&gt; &lt;h3 class=&quot;text-center text-info border-bottom pb-3&quot;&gt;注&amp;nbsp;&amp;nbsp;册&lt;/h3&gt; &lt;form class=&quot;mt-5&quot; method=&quot;post&quot; th:action=&quot;@&#123;/register&#125;&quot;&gt; &lt;div class=&quot;form-group row&quot;&gt; &lt;label for=&quot;username&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;账号:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;text&quot; th:class=&quot;|form-control $&#123;usernameMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; th:value=&quot;$&#123;user!=null?user.username:&#x27;&#x27;&#125;&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;请输入您的账号!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;usernameMsg&#125;&quot;&gt; 该账号已存在! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;password&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;密码:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;password&quot; th:class=&quot;|form-control $&#123;passwordMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; th:value=&quot;$&#123;user!=null?user.password:&#x27;&#x27;&#125;&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;请输入您的密码!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;passwordMsg&#125;&quot;&gt; 密码长度不能小于8位! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;confirm-password&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;确认密码:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;form-control&quot; th:value=&quot;$&#123;user!=null?user.password:&#x27;&#x27;&#125;&quot; id=&quot;confirm-password&quot; placeholder=&quot;请再次输入密码!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot;&gt; 两次输入的密码不一致! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row&quot;&gt; &lt;label for=&quot;email&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;邮箱:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;email&quot; th:class=&quot;|form-control $&#123;emailMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; th:value=&quot;$&#123;user!=null?user.email:&#x27;&#x27;&#125;&quot; id=&quot;email&quot; name=&quot;email&quot; placeholder=&quot;请输入您的邮箱!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;emailMsg&#125;&quot;&gt; 该邮箱已注册! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;div class=&quot;col-sm-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-sm-10 text-center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-info text-white form-control&quot;&gt;立即注册&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;# 激活注册账号（邮箱链接）三种结果--常量类 激活业务public interface CommunityConstant &#123; /** * 激活成功 */ int ACTIVATION_SUCCESS = 0; /** * 重复激活 */ int ACTIVATION_REPEAT = 1; /** * 激活失败 */ int ACTIVATION_FAILURE = 2;&#125;# 激活controller 登录模板&lt;!doctype html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://static.nowcoder.com/images/logo_87_87.png&quot;/&gt; &lt;title&gt;牛客网-激活账号&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div&gt; &lt;p&gt; &lt;b th:text=&quot;$&#123;email&#125;&quot;&gt;xxx@xxx.com&lt;/b&gt;, 您好! &lt;/p&gt; &lt;p&gt; 您正在注册牛客网, 这是一封激活邮件, 请点击 &lt;a th:href=&quot;$&#123;url&#125;&quot;&gt;此链接&lt;/a&gt;, 激活您的牛客账号! &lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 2-3 会话管理12345678910• HTTP的基本性质- HTTP是简单的- HTTP是可扩展的- HTTP是无状态的，有会话的• Cookie- 是服务器发送到浏览器，并保存在浏览器端的一小块数据。- 浏览器下次访问该服务器时，会自动携带块该数据，将其发送给服务器。• Session- 是JavaEE的标准，用于在服务端记录客户端信息。- 数据存放在服务端更加安全，但是也会增加服务端的内存压力。 12cookie测试session测试 多服务器情况 粘性session 同步session session服务器 会话数据存储 数据库（非关系） 代码1234567891011121314151617181920212223242526272829303132333435// cookie示例@RequestMapping(path = &quot;/cookie/set&quot;, method = RequestMethod.GET)@ResponseBodypublic String setCookie(HttpServletResponse response) &#123; // 创建cookie Cookie cookie = new Cookie(&quot;code&quot;, CommunityUtil.generateUUID()); // 设置cookie生效的范围 cookie.setPath(&quot;/community/alpha&quot;); // 设置cookie的生存时间 cookie.setMaxAge(60 * 10); // 发送cookie response.addCookie(cookie); return &quot;set cookie&quot;;&#125;@RequestMapping(path = &quot;/cookie/get&quot;, method = RequestMethod.GET)@ResponseBodypublic String getCookie(@CookieValue(&quot;code&quot;) String code) &#123; System.out.println(code); return &quot;get cookie&quot;;&#125;// session示例@RequestMapping(path = &quot;/session/set&quot;, method = RequestMethod.GET)@ResponseBodypublic String setSession(HttpSession session) &#123; session.setAttribute(&quot;id&quot;, 1); session.setAttribute(&quot;name&quot;, &quot;Test&quot;); return &quot;set session&quot;;&#125;@RequestMapping(path = &quot;/session/get&quot;, method = RequestMethod.GET)@ResponseBodypublic String getSession(HttpSession session) &#123; System.out.println(session.getAttribute(&quot;id&quot;)); System.out.println(session.getAttribute(&quot;name&quot;)); return &quot;get session&quot;;&#125; 2-4 生成验证码1234Kaptcha- 导入 jar 包- 编写 Kaptcha 配置类- 生成随机字符、生成图片 生成验证码的配置类 controller login图片 js 统一路径 随机参数 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110# 导入 jar 包&lt;dependency&gt; &lt;groupId&gt;com.github.penggle&lt;/groupId&gt; &lt;artifactId&gt;kaptcha&lt;/artifactId&gt; &lt;version&gt;2.3.2&lt;/version&gt;&lt;/dependency&gt;# 编写 Kaptcha 配置类@Configurationpublic class KaptchaConfig &#123; @Bean public Producer kaptchaProducer() &#123; Properties properties = new Properties(); properties.setProperty(&quot;kaptcha.image.width&quot;, &quot;100&quot;); properties.setProperty(&quot;kaptcha.image.height&quot;, &quot;40&quot;); properties.setProperty(&quot;kaptcha.textproducer.font.size&quot;, &quot;32&quot;); properties.setProperty(&quot;kaptcha.textproducer.font.color&quot;, &quot;0,0,0&quot;); properties.setProperty(&quot;kaptcha.textproducer.char.string&quot;, &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYAZ&quot;); properties.setProperty(&quot;kaptcha.textproducer.char.length&quot;, &quot;4&quot;); properties.setProperty(&quot;kaptcha.noise.impl&quot;, &quot;com.google.code.kaptcha.impl.NoNoise&quot;); DefaultKaptcha kaptcha = new DefaultKaptcha(); Config config = new Config(properties); kaptcha.setConfig(config); return kaptcha; &#125;&#125;# 生成随机字符、生成图片@RequestMapping(path = &quot;/kaptcha&quot;, method = RequestMethod.GET)public void getKaptcha(HttpServletResponse response, HttpSession session) &#123; // 生成验证码 String text = kaptchaProducer.createText(); BufferedImage image = kaptchaProducer.createImage(text); // 将验证码存入session session.setAttribute(&quot;kaptcha&quot;, text); // 将突图片输出给浏览器 response.setContentType(&quot;image/png&quot;); try &#123; OutputStream os = response.getOutputStream(); ImageIO.write(image, &quot;png&quot;, os); &#125; catch (IOException e) &#123; logger.error(&quot;响应验证码失败:&quot; + e.getMessage()); &#125;&#125;# 前端&lt;div class=&quot;main&quot;&gt; &lt;div class=&quot;container pl-5 pr-5 pt-3 pb-3 mt-3 mb-3&quot;&gt; &lt;h3 class=&quot;text-center text-info border-bottom pb-3&quot;&gt;登&amp;nbsp;&amp;nbsp;录&lt;/h3&gt; &lt;form class=&quot;mt-5&quot;&gt; &lt;div class=&quot;form-group row&quot;&gt; &lt;label for=&quot;username&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;账号:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control is-invalid&quot; id=&quot;username&quot; placeholder=&quot;请输入您的账号!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot;&gt; 该账号不存在! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;password&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;密码:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;password&quot; class=&quot;form-control is-invalid&quot; id=&quot;password&quot; placeholder=&quot;请输入您的密码!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot;&gt; 密码长度不能小于8位! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;verifycode&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;验证码:&lt;/label&gt; &lt;div class=&quot;col-sm-6&quot;&gt; &lt;input type=&quot;text&quot; class=&quot;form-control is-invalid&quot; id=&quot;verifycode&quot; placeholder=&quot;请输入验证码!&quot;&gt; &lt;div class=&quot;invalid-feedback&quot;&gt; 验证码不正确! &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;img th:src=&quot;@&#123;/kaptcha&#125;&quot; id=&quot;kaptcha&quot; style=&quot;width:100px;height:40px;&quot; class=&quot;mr-2&quot;/&gt; &lt;a href=&quot;javascript:refresh_kaptcha();&quot; class=&quot;font-size-12 align-bottom&quot;&gt;刷新验证码&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;div class=&quot;col-sm-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;remember-me&quot; checked=&quot;checked&quot;&gt; &lt;label class=&quot;form-check-label&quot; for=&quot;remember-me&quot;&gt;记住我&lt;/label&gt; &lt;a href=&quot;forget.html&quot; class=&quot;text-danger float-right&quot;&gt;忘记密码?&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;div class=&quot;col-sm-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-sm-10 text-center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-info text-white form-control&quot;&gt;立即登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;var CONTEXT_PATH = &quot;/community&quot;;&lt;script th:src=&quot;@&#123;/js/global.js&#125;&quot;&gt;&lt;/script&gt;&lt;script&gt; function refresh_kaptcha() &#123; var path = CONTEXT_PATH + &quot;/kaptcha?p=&quot; + Math.random(); $(&quot;#kaptcha&quot;).attr(&quot;src&quot;, path); &#125;&lt;/script&gt; 2-5 开发登录、退出功能123456789• 访问登录页面- 点击顶部区域内的链接，打开登录页面。• 登录- 验证账号、密码、验证码。- 成功时，生成登录凭证，发放给客户端。- 失败时，跳转回登录页。• 退出- 将登录凭证修改为失效状态。- 跳转至网站首页。 登录凭证实体登录业务（空值处理 验证账号|是否存在/是否激活 验证密码 生成登录凭证）controller（检查验证码 登录凭证超时时间设置 检查账号密码登录页 表单 请求参数（输入回显 提示文本）退出功能（凭证失效 重定向到登录页 退出链接） 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155# 登录凭证public class LoginTicket &#123; private int id; private int userId; private String ticket; private int status; private Date expired;&#125;# 实体# 登录业务（空值处理 验证账号|是否存在/是否激活 验证密码 生成登录凭证）public Map&lt;String, Object&gt; login(String username, String password, int expiredSeconds) &#123; Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); // 空值处理 if (StringUtils.isBlank(username)) &#123; map.put(&quot;usernameMsg&quot;, &quot;账号不能为空!&quot;); return map; &#125; if (StringUtils.isBlank(password)) &#123; map.put(&quot;passwordMsg&quot;, &quot;密码不能为空!&quot;); return map; &#125; // 验证账号 User user = userMapper.selectByName(username); if (user == null) &#123; map.put(&quot;usernameMsg&quot;, &quot;该账号不存在!&quot;); return map; &#125; // 验证状态 if (user.getStatus() == 0) &#123; map.put(&quot;usernameMsg&quot;, &quot;该账号未激活!&quot;); return map; &#125; // 验证密码 password = CommunityUtil.md5(password + user.getSalt()); if (!user.getPassword().equals(password)) &#123; map.put(&quot;passwordMsg&quot;, &quot;密码不正确!&quot;); return map; &#125; // 生成登录凭证 LoginTicket loginTicket = new LoginTicket(); loginTicket.setUserId(user.getId()); loginTicket.setTicket(CommunityUtil.generateUUID()); loginTicket.setStatus(0); loginTicket.setExpired(new Date(System.currentTimeMillis() + expiredSeconds * 1000)); loginTicketMapper.insertLoginTicket(loginTicket); map.put(&quot;ticket&quot;, loginTicket.getTicket()); return map;&#125;# controller（检查验证码 登录凭证超时时间设置 检查账号密码@RequestMapping(path = &quot;/login&quot;, method = RequestMethod.POST)public String login(String username, String password, String code, boolean rememberme, Model model, HttpSession session, HttpServletResponse response) &#123; // 检查验证码 String kaptcha = (String) session.getAttribute(&quot;kaptcha&quot;); if (StringUtils.isBlank(kaptcha) || StringUtils.isBlank(code) || !kaptcha.equalsIgnoreCase(code)) &#123; model.addAttribute(&quot;codeMsg&quot;, &quot;验证码不正确!&quot;); return &quot;/site/login&quot;; &#125; // 检查账号,密码 int expiredSeconds = rememberme ? REMEMBER_EXPIRED_SECONDS : DEFAULT_EXPIRED_SECONDS; Map&lt;String, Object&gt; map = userService.login(username, password, expiredSeconds); if (map.containsKey(&quot;ticket&quot;)) &#123; Cookie cookie = new Cookie(&quot;ticket&quot;, map.get(&quot;ticket&quot;).toString()); cookie.setPath(contextPath); cookie.setMaxAge(expiredSeconds); response.addCookie(cookie); return &quot;redirect:/index&quot;; &#125; else &#123; model.addAttribute(&quot;usernameMsg&quot;, map.get(&quot;usernameMsg&quot;)); model.addAttribute(&quot;passwordMsg&quot;, map.get(&quot;passwordMsg&quot;)); return &quot;/site/login&quot;; &#125;&#125;/** * 默认状态的登录凭证的超时时间 */int DEFAULT_EXPIRED_SECONDS = 3600 * 12;/** * 记住状态的登录凭证超时时间 */int REMEMBER_EXPIRED_SECONDS = 3600 * 24 * 100;# 登录页 表单 请求参数（输入回显 提示文本）&lt;!-- 内容 --&gt;&lt;div class=&quot;main&quot;&gt; &lt;div class=&quot;container pl-5 pr-5 pt-3 pb-3 mt-3 mb-3&quot;&gt; &lt;h3 class=&quot;text-center text-info border-bottom pb-3&quot;&gt;登&amp;nbsp;&amp;nbsp;录&lt;/h3&gt; &lt;form class=&quot;mt-5&quot; method=&quot;post&quot; th:action=&quot;@&#123;/login&#125;&quot;&gt; &lt;div class=&quot;form-group row&quot;&gt; &lt;label for=&quot;username&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;账号:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;text&quot; th:class=&quot;|form-control $&#123;usernameMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; th:value=&quot;$&#123;param.username&#125;&quot; id=&quot;username&quot; name=&quot;username&quot; placeholder=&quot;请输入您的账号!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;usernameMsg&#125;&quot;&gt; 该账号不存在! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;password&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;密码:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;password&quot; th:class=&quot;|form-control $&#123;passwordMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; th:value=&quot;$&#123;param.password&#125;&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;请输入您的密码!&quot; required&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;passwordMsg&#125;&quot;&gt; 密码长度不能小于8位! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;verifycode&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;验证码:&lt;/label&gt; &lt;div class=&quot;col-sm-6&quot;&gt; &lt;input type=&quot;text&quot; th:class=&quot;|form-control $&#123;codeMsg!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; id=&quot;verifycode&quot; name=&quot;code&quot; placeholder=&quot;请输入验证码!&quot;&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;codeMsg&#125;&quot;&gt; 验证码不正确! &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;col-sm-4&quot;&gt; &lt;img th:src=&quot;@&#123;/kaptcha&#125;&quot; id=&quot;kaptcha&quot; style=&quot;width:100px;height:40px;&quot; class=&quot;mr-2&quot;/&gt; &lt;a href=&quot;javascript:refresh_kaptcha();&quot; class=&quot;font-size-12 align-bottom&quot;&gt;刷新验证码&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;div class=&quot;col-sm-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;input type=&quot;checkbox&quot; id=&quot;remember-me&quot; name=&quot;rememberme&quot; th:checked=&quot;$&#123;param.rememberme&#125;&quot;&gt; &lt;label class=&quot;form-check-label&quot; for=&quot;remember-me&quot;&gt;记住我&lt;/label&gt; &lt;a href=&quot;forget.html&quot; class=&quot;text-danger float-right&quot;&gt;忘记密码?&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;div class=&quot;col-sm-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-sm-10 text-center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-info text-white form-control&quot;&gt;立即登录&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;# 退出功能（凭证失效 重定向到登录页 退出链接）public void logout(String ticket) &#123; loginTicketMapper.updateStatus(ticket, 1);&#125;@RequestMapping(path = &quot;/logout&quot;, method = RequestMethod.GET)public String logout(@CookieValue(&quot;ticket&quot;) String ticket) &#123; userService.logout(ticket); return &quot;redirect:/login&quot;;&#125; 2-6 显示登录信息12345678• 拦截器示例- 定义拦截器，实现HandlerInterceptor- 配置拦截器，为它指定拦截、排除的路径• 拦截器应用- 在请求开始时查询登录用户- 在本次请求中持有用户数据- 在模板视图上显示用户数据- 在请求结束时清理用户数据 12345拦截器测试 interceptor mvc配置利用cookie获取凭证-用户实体获取cookie的工具类LoginTicketInterceptor（获取凭证 获取用户--持有用户信息的工具类 ThreadLocal）页面th:if 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182# 拦截器测试 interceptor mvc配置@Componentpublic class AlphaInterceptor implements HandlerInterceptor &#123; private static final Logger logger = LoggerFactory.getLogger(AlphaInterceptor.class); // 在Controller之前执行 @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; logger.debug(&quot;preHandle: &quot; + handler.toString()); return true; &#125; // 在Controller之后执行 @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; logger.debug(&quot;postHandle: &quot; + handler.toString()); &#125; // 在TemplateEngine之后执行 @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123; logger.debug(&quot;afterCompletion: &quot; + handler.toString()); &#125;&#125;@Configurationpublic class WebMvcConfig implements WebMvcConfigurer &#123; @Autowired private AlphaInterceptor alphaInterceptor; @Autowired private LoginTicketInterceptor loginTicketInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) &#123; registry.addInterceptor(alphaInterceptor) .excludePathPatterns(&quot;/**/*.css&quot;, &quot;/**/*.js&quot;, &quot;/**/*.png&quot;, &quot;/**/*.jpg&quot;, &quot;/**/*.jpeg&quot;) .addPathPatterns(&quot;/register&quot;, &quot;/login&quot;); registry.addInterceptor(loginTicketInterceptor) .excludePathPatterns(&quot;/**/*.css&quot;, &quot;/**/*.js&quot;, &quot;/**/*.png&quot;, &quot;/**/*.jpg&quot;, &quot;/**/*.jpeg&quot;); &#125;&#125;# 利用cookie获取凭证-用户实体# 获取cookie的工具类public class CookieUtil &#123; public static String getValue(HttpServletRequest request, String name) &#123; if (request == null || name == null) &#123; throw new IllegalArgumentException(&quot;参数为空!&quot;); &#125; Cookie[] cookies = request.getCookies(); if (cookies != null) &#123; for (Cookie cookie : cookies) &#123; if (cookie.getName().equals(name)) &#123; return cookie.getValue(); &#125; &#125; &#125; return null; &#125;&#125;# LoginTicketInterceptor（获取凭证 获取用户--持有用户信息的工具类 ThreadLocal）/** * 持有用户信息,用于代替session对象. */@Componentpublic class HostHolder &#123; private ThreadLocal&lt;User&gt; users = new ThreadLocal&lt;&gt;(); public void setUser(User user) &#123; users.set(user); &#125; public User getUser() &#123; return users.get(); &#125; public void clear() &#123; users.remove(); &#125;&#125;@Componentpublic class LoginTicketInterceptor implements HandlerInterceptor &#123; @Autowired private UserService userService; @Autowired private HostHolder hostHolder; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; // 从cookie中获取凭证 String ticket = CookieUtil.getValue(request, &quot;ticket&quot;); if (ticket != null) &#123; // 查询凭证 LoginTicket loginTicket = userService.findLoginTicket(ticket); // 检查凭证是否有效 if (loginTicket != null &amp;&amp; loginTicket.getStatus() == 0 &amp;&amp; loginTicket.getExpired().after(new Date())) &#123; // 根据凭证查询用户 User user = userService.findUserById(loginTicket.getUserId()); // 在本次请求中持有用户 hostHolder.setUser(user); &#125; &#125; return true; &#125; @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123; User user = hostHolder.getUser(); if (user != null &amp;&amp; modelAndView != null) &#123; modelAndView.addObject(&quot;loginUser&quot;, user); &#125; &#125; @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123; hostHolder.clear(); &#125;&#125;# 页面th:if&lt;!-- 头部 --&gt;&lt;header class=&quot;bg-dark sticky-top&quot; th:fragment=&quot;header&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;!-- 导航 --&gt; &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark&quot;&gt; &lt;!-- logo --&gt; &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;&lt;/a&gt; &lt;button class=&quot;navbar-toggler&quot; type=&quot;button&quot; data-toggle=&quot;collapse&quot; data-target=&quot;#navbarSupportedContent&quot; aria-controls=&quot;navbarSupportedContent&quot; aria-expanded=&quot;false&quot; aria-label=&quot;Toggle navigation&quot;&gt; &lt;span class=&quot;navbar-toggler-icon&quot;&gt;&lt;/span&gt; &lt;/button&gt; &lt;!-- 功能 --&gt; &lt;div class=&quot;collapse navbar-collapse&quot; id=&quot;navbarSupportedContent&quot;&gt; &lt;ul class=&quot;navbar-nav mr-auto&quot;&gt; &lt;li class=&quot;nav-item ml-3 btn-group-vertical&quot;&gt; &lt;a class=&quot;nav-link&quot; th:href=&quot;@&#123;/index&#125;&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item ml-3 btn-group-vertical&quot; th:if=&quot;$&#123;loginUser!=null&#125;&quot;&gt; &lt;a class=&quot;nav-link position-relative&quot; href=&quot;site/letter.html&quot;&gt;消息&lt;span class=&quot;badge badge-danger&quot;&gt;12&lt;/span&gt;&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item ml-3 btn-group-vertical&quot; th:if=&quot;$&#123;loginUser==null&#125;&quot;&gt; &lt;a class=&quot;nav-link&quot; th:href=&quot;@&#123;/register&#125;&quot;&gt;注册&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item ml-3 btn-group-vertical&quot; th:if=&quot;$&#123;loginUser==null&#125;&quot;&gt; &lt;a class=&quot;nav-link&quot; th:href=&quot;@&#123;/login&#125;&quot;&gt;登录&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;nav-item ml-3 btn-group-vertical dropdown&quot; th:if=&quot;$&#123;loginUser!=null&#125;&quot;&gt; &lt;a class=&quot;nav-link dropdown-toggle&quot; href=&quot;#&quot; id=&quot;navbarDropdown&quot; role=&quot;button&quot; data-toggle=&quot;dropdown&quot; aria-haspopup=&quot;true&quot; aria-expanded=&quot;false&quot;&gt; &lt;img th:src=&quot;$&#123;loginUser.headerUrl&#125;&quot; class=&quot;rounded-circle&quot; style=&quot;width:30px;&quot;/&gt; &lt;/a&gt; &lt;div class=&quot;dropdown-menu&quot; aria-labelledby=&quot;navbarDropdown&quot;&gt; &lt;a class=&quot;dropdown-item text-center&quot; href=&quot;site/profile.html&quot;&gt;个人主页&lt;/a&gt; &lt;a class=&quot;dropdown-item text-center&quot; href=&quot;site/setting.html&quot;&gt;账号设置&lt;/a&gt; &lt;a class=&quot;dropdown-item text-center&quot; th:href=&quot;@&#123;/logout&#125;&quot;&gt;退出登录&lt;/a&gt; &lt;div class=&quot;dropdown-divider&quot;&gt;&lt;/div&gt; &lt;span class=&quot;dropdown-item text-center text-secondary&quot; th:utext=&quot;$&#123;loginUser.username&#125;&quot;&gt;nowcoder&lt;/span&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;!-- 搜索 --&gt; &lt;form class=&quot;form-inline my-2 my-lg-0&quot; action=&quot;site/search.html&quot;&gt; &lt;input class=&quot;form-control mr-sm-2&quot; type=&quot;search&quot; aria-label=&quot;Search&quot; /&gt; &lt;button class=&quot;btn btn-outline-light my-2 my-sm-0&quot; type=&quot;submit&quot;&gt;搜索&lt;/button&gt; &lt;/form&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/div&gt;&lt;/header&gt; 2-7 账号设置12345678• 上传文件- 请求：必须是POST请求- 表单：enctype=“multipart/form-data”- Spring MVC：通过 MultipartFile 处理上传文件• 开发步骤- 访问账号设置页面- 上传头像- 获取头像 1234设置页配置上传路径上传controller方法（model返回提示信息）获取头像 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113# 设置页&lt;!-- 上传头像 --&gt;&lt;h6 class=&quot;text-left text-info border-bottom pb-2&quot;&gt;上传头像&lt;/h6&gt;&lt;form class=&quot;mt-5&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot; th:action=&quot;@&#123;/user/upload&#125;&quot;&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;label for=&quot;head-image&quot; class=&quot;col-sm-2 col-form-label text-right&quot;&gt;选择头像:&lt;/label&gt; &lt;div class=&quot;col-sm-10&quot;&gt; &lt;div class=&quot;custom-file&quot;&gt; &lt;input type=&quot;file&quot; th:class=&quot;|custom-file-input $&#123;error!=null?&#x27;is-invalid&#x27;:&#x27;&#x27;&#125;|&quot; id=&quot;head-image&quot; name=&quot;headerImage&quot; lang=&quot;es&quot; required=&quot;&quot;&gt; &lt;label class=&quot;custom-file-label&quot; for=&quot;head-image&quot; data-browse=&quot;文件&quot;&gt;选择一张图片&lt;/label&gt; &lt;div class=&quot;invalid-feedback&quot; th:text=&quot;$&#123;error&#125;&quot;&gt; 该账号不存在! &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;form-group row mt-4&quot;&gt; &lt;div class=&quot;col-sm-2&quot;&gt;&lt;/div&gt; &lt;div class=&quot;col-sm-10 text-center&quot;&gt; &lt;button type=&quot;submit&quot; class=&quot;btn btn-info text-white form-control&quot;&gt;立即上传&lt;/button&gt; &lt;/div&gt; &lt;/div&gt;&lt;/form&gt;# 配置上传路径community.path.domain=http://localhost:8080community.path.upload=d:/work/data/upload# 上传controller方法（model返回提示信息）@Controller@RequestMapping(&quot;/user&quot;)public class UserController &#123; private static final Logger logger = LoggerFactory.getLogger(UserController.class); @Value(&quot;$&#123;community.path.upload&#125;&quot;) private String uploadPath; @Value(&quot;$&#123;community.path.domain&#125;&quot;) private String domain; @Value(&quot;$&#123;server.servlet.context-path&#125;&quot;) private String contextPath; @Autowired private UserService userService; @Autowired private HostHolder hostHolder; @RequestMapping(path = &quot;/setting&quot;, method = RequestMethod.GET) public String getSettingPage() &#123; return &quot;/site/setting&quot;; &#125; @RequestMapping(path = &quot;/upload&quot;, method = RequestMethod.POST) public String uploadHeader(MultipartFile headerImage, Model model) &#123; if (headerImage == null) &#123; model.addAttribute(&quot;error&quot;, &quot;您还没有选择图片!&quot;); return &quot;/site/setting&quot;; &#125; String fileName = headerImage.getOriginalFilename(); String suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)); if (StringUtils.isBlank(suffix)) &#123; model.addAttribute(&quot;error&quot;, &quot;文件的格式不正确!&quot;); return &quot;/site/setting&quot;; &#125; // 生成随机文件名 fileName = CommunityUtil.generateUUID() + suffix; // 确定文件存放的路径 File dest = new File(uploadPath + &quot;/&quot; + fileName); try &#123; // 存储文件 headerImage.transferTo(dest); &#125; catch (IOException e) &#123; logger.error(&quot;上传文件失败: &quot; + e.getMessage()); throw new RuntimeException(&quot;上传文件失败,服务器发生异常!&quot;, e); &#125; // 更新当前用户的头像的路径(web访问路径) // http://localhost:8080/community/user/header/xxx.png User user = hostHolder.getUser(); String headerUrl = domain + contextPath + &quot;/user/header/&quot; + fileName; userService.updateHeader(user.getId(), headerUrl); return &quot;redirect:/index&quot;; &#125; @RequestMapping(path = &quot;/header/&#123;fileName&#125;&quot;, method = RequestMethod.GET) public void getHeader(@PathVariable(&quot;fileName&quot;) String fileName, HttpServletResponse response) &#123; // 服务器存放路径 fileName = uploadPath + &quot;/&quot; + fileName; // 文件后缀 String suffix = fileName.substring(fileName.lastIndexOf(&quot;.&quot;)); // 响应图片 response.setContentType(&quot;image/&quot; + suffix); try ( FileInputStream fis = new FileInputStream(fileName); OutputStream os = response.getOutputStream(); ) &#123; byte[] buffer = new byte[1024]; int b = 0; while ((b = fis.read(buffer)) != -1) &#123; os.write(buffer, 0, b); &#125; &#125; catch (IOException e) &#123; logger.error(&quot;读取头像失败: &quot; + e.getMessage()); &#125; &#125;&#125;# 获取头像 2-8 检查登录状态123456789• 使用拦截器- 在方法前标注自定义注解- 拦截所有请求，只处理带有该注解的方法• 自定义注解- 常用的元注解：@Target、@Retention、@Document、@Inherited- 如何读取注解：Method.getDeclaredAnnotations​()Method.getAnnotation​(Class&lt;T&gt; annotationClass) 12自定义注解拦截器 代码1234567891011121314151617181920212223242526272829# 自定义注解@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface LoginRequired &#123;&#125;# 拦截器@Componentpublic class LoginRequiredInterceptor implements HandlerInterceptor &#123; @Autowired private HostHolder hostHolder; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123; if (handler instanceof HandlerMethod) &#123; HandlerMethod handlerMethod = (HandlerMethod) handler; Method method = handlerMethod.getMethod(); LoginRequired loginRequired = method.getAnnotation(LoginRequired.class); if (loginRequired != null &amp;&amp; hostHolder.getUser() == null) &#123; response.sendRedirect(request.getContextPath() + &quot;/login&quot;); return false; &#125; &#125; return true; &#125;&#125;registry.addInterceptor(loginRequiredInterceptor) .excludePathPatterns(&quot;/**/*.css&quot;, &quot;/**/*.js&quot;, &quot;/**/*.png&quot;, &quot;/**/*.jpg&quot;, &quot;/**/*.jpeg&quot;); 3 核心功能3-1 过滤敏感词nk社区（编写） 2021.9.22开始做这个社区项目，后面几天就以此为主要任务，做完为止。一个典型的crud的单体应用。 0 框架与环境0-1 框架装载beanspringmvc注解 0-2 数据库12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667CREATE TABLE `user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(50) DEFAULT NULL, `password` varchar(50) DEFAULT NULL, `salt` varchar(50) DEFAULT NULL, `email` varchar(100) DEFAULT NULL, `type` int(11) DEFAULT NULL COMMENT &#x27;0-普通用户; 1-超级管理员; 2-版主;&#x27;, `status` int(11) DEFAULT NULL COMMENT &#x27;0-未激活; 1-已激活;&#x27;, `activation_code` varchar(100) DEFAULT NULL, `header_url` varchar(200) DEFAULT NULL, `create_time` timestamp NULL DEFAULT NULL, PRIMARY KEY (`id`), KEY `index_username` (`username`(20)), KEY `index_email` (`email`(20))) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=utf8;CREATE TABLE `discuss_post` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` varchar(45) DEFAULT NULL, `title` varchar(100) DEFAULT NULL, `content` text, `type` int(11) DEFAULT NULL COMMENT &#x27;0-普通; 1-置顶;&#x27;, `status` int(11) DEFAULT NULL COMMENT &#x27;0-正常; 1-精华; 2-拉黑;&#x27;, `create_time` timestamp NULL DEFAULT NULL, `comment_count` int(11) DEFAULT NULL, `score` double DEFAULT NULL, PRIMARY KEY (`id`), KEY `index_user_id` (`user_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;CREATE TABLE `message` ( `id` int(11) NOT NULL AUTO_INCREMENT, `from_id` int(11) DEFAULT NULL, `to_id` int(11) DEFAULT NULL, `conversation_id` varchar(45) NOT NULL, `content` text, `status` int(11) DEFAULT NULL COMMENT &#x27;0-未读;1-已读;2-删除;&#x27;, `create_time` timestamp NULL DEFAULT NULL, PRIMARY KEY (`id`), KEY `index_from_id` (`from_id`), KEY `index_to_id` (`to_id`), KEY `index_conversation_id` (`conversation_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;CREATE TABLE `comment` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) DEFAULT NULL, `entity_type` int(11) DEFAULT NULL, `entity_id` int(11) DEFAULT NULL, `target_id` int(11) DEFAULT NULL, `content` text, `status` int(11) DEFAULT NULL, `create_time` timestamp NULL DEFAULT NULL, PRIMARY KEY (`id`), KEY `index_user_id` (`user_id`) /*!80000 INVISIBLE */, KEY `index_entity_id` (`entity_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;CREATE TABLE `login_ticket` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `ticket` varchar(45) NOT NULL, `status` int(11) DEFAULT &#x27;0&#x27; COMMENT &#x27;0-有效; 1-无效;&#x27;, `expired` timestamp NOT NULL, PRIMARY KEY (`id`), KEY `index_ticket` (`ticket`(20))) ENGINE=InnoDB DEFAULT CHARSET=utf8; 12345678UserMapper selectById selectByName selectByEmail insertUser updateStatus updateHeader updatePassword 1 基本环境1-1 用户实体相关先看着敲一遍，然后自己写一遍，再对照，在此前先熟悉下数据库 123456789101112131415create table `user` ( `id` int(11) not null auto_increment, `username` varchar(50) default null, `password` varchar(50) default null, `salt` varchar(50) default null, `email` varchar(100) default null, `type` int(11) default null, `status` int(11) default null, `activation_code` varchar(100) default null, `header_url` varchar(200) default null, `create_time` timestamp null default null, primary key(`id`), key `index_username`(`username`(20)), key `index_email`(`email`(20))) engine = innodb auto_increment=101 default charset=utf8; 编写测试完用户实体的总结 12345678流程依赖：数据库驱动+mybatis配置：数据源 连接池配置实体mapper 测试crud注意测试，用到容器中的bean 须用@SpringBootTest 1-2 基本环境配置 原始网页素材已经没有了，初始是配置好分页相关的 thymeleaf语法 https://fanlychie.github.io/post/thymeleaf.html 日志默认 logback-spring.xml 1-3 帖子实体与分页实现帖子实体 mapper分页实体 thymeleaf 12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!-- 帖子列表 --&gt;&lt;ul class=&quot;list-unstyled&quot;&gt; &lt;li class=&quot;media pb-3 pt-3 mb-3 border-bottom&quot; th:each=&quot;map:$&#123;discussPosts&#125;&quot;&gt; &lt;a href=&quot;site/profile.html&quot;&gt; &lt;img th:src=&quot;$&#123;map.user.headerUrl&#125;&quot; class=&quot;mr-4 rounded-circle&quot; alt=&quot;用户头像&quot; style=&quot;width:50px;height:50px;&quot;&gt; &lt;/a&gt; &lt;div class=&quot;media-body&quot;&gt; &lt;h6 class=&quot;mt-0 mb-3&quot;&gt; &lt;a href=&quot;#&quot; th:utext=&quot;$&#123;map.post.title&#125;&quot;&gt;备战春招，面试刷题跟他复习，一个月全搞定！&lt;/a&gt; &lt;span class=&quot;badge badge-secondary bg-primary&quot; th:if=&quot;$&#123;map.post.type==1&#125;&quot;&gt;置顶&lt;/span&gt; &lt;span class=&quot;badge badge-secondary bg-danger&quot; th:if=&quot;$&#123;map.post.status==1&#125;&quot;&gt;精华&lt;/span&gt; &lt;/h6&gt; &lt;div class=&quot;text-muted font-size-12&quot;&gt; &lt;u class=&quot;mr-3&quot; th:utext=&quot;$&#123;map.user.username&#125;&quot;&gt;寒江雪&lt;/u&gt; 发布于 &lt;b th:text=&quot;$&#123;#dates.format(map.post.createTime,&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;&gt;2019-04-15 15:32:18&lt;/b&gt; &lt;ul class=&quot;d-inline float-right&quot;&gt; &lt;li class=&quot;d-inline ml-2&quot;&gt;赞 11&lt;/li&gt; &lt;li class=&quot;d-inline ml-2&quot;&gt;|&lt;/li&gt; &lt;li class=&quot;d-inline ml-2&quot;&gt;回帖 7&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/li&gt;&lt;/ul&gt;&lt;!-- 分页 --&gt;&lt;nav class=&quot;mt-5&quot; th:if=&quot;$&#123;page.rows&gt;0&#125;&quot;&gt; &lt;ul class=&quot;pagination justify-content-center&quot;&gt; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; th:href=&quot;@&#123;$&#123;page.path&#125;(current=1)&#125;&quot;&gt;首页&lt;/a&gt; &lt;/li&gt; &lt;li th:class=&quot;|page-item $&#123;page.current==1?&#x27;disabled&#x27;:&#x27;&#x27;&#125;|&quot;&gt; &lt;a class=&quot;page-link&quot; th:href=&quot;@&#123;$&#123;page.path&#125;(current=$&#123;page.current-1&#125;)&#125;&quot;&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;li th:class=&quot;|page-item $&#123;i==page.current?&#x27;active&#x27;:&#x27;&#x27;&#125;|&quot; th:each=&quot;i:$&#123;#numbers.sequence(page.from,page.to)&#125;&quot;&gt; &lt;a class=&quot;page-link&quot; th:href=&quot;@&#123;$&#123;page.path&#125;(current=$&#123;i&#125;)&#125;&quot; th:text=&quot;$&#123;i&#125;&quot;&gt;1&lt;/a&gt; &lt;/li&gt; &lt;li th:class=&quot;|page-item $&#123;page.current==page.total?&#x27;disabled&#x27;:&#x27;&#x27;&#125;|&quot;&gt; &lt;a class=&quot;page-link&quot; th:href=&quot;@&#123;$&#123;page.path&#125;(current=$&#123;page.current+1&#125;)&#125;&quot;&gt;下一页&lt;/a&gt; &lt;/li&gt; &lt;li class=&quot;page-item&quot;&gt; &lt;a class=&quot;page-link&quot; th:href=&quot;@&#123;$&#123;page.path&#125;(current=$&#123;page.total&#125;)&#125;&quot;&gt;末页&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; 12345涉及到对象及运算的都用$&#123;&#125;th:href=@&#123;$&#123;&#125;()&#125;th:class=&quot;||&quot;th:each=&quot;map:$&#123;&#125;&quot;th:text=&quot;&quot; 分页测试报错 There is no getter for property named ‘userId’ in ‘class java.lang.Integer’https://blog.csdn.net/qq_30604989/article/details/81297400 2 登录模块2-1 邮件功能注意测试时有延迟，可能需要几分钟才能发送成功参考 https://blog.csdn.net/breakaway_01/article/details/111474564 2-2 注册123th:fragment=&quot;header&quot;th:href=&quot;@&#123;/index&#125;&quot;th:replace=&quot;index::header&quot; 2-3 问题thymeleaf找不到页面的问题注意@Controller配置@Slf4jhttps://www.jianshu.com/p/6e137ee836a1","categories":[],"tags":[]},{"title":"ls树相关","slug":"ls-tree","date":"2021-09-20T16:12:54.000Z","updated":"2021-09-28T14:44:24.702Z","comments":true,"path":"2021/09/21/ls-tree/","link":"","permalink":"https://shadowbynl.github.io/2021/09/21/ls-tree/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"SQL相关","slug":"sql-00","date":"2021-09-20T14:51:34.000Z","updated":"2021-09-28T14:43:05.694Z","comments":true,"path":"2021/09/20/sql-00/","link":"","permalink":"https://shadowbynl.github.io/2021/09/20/sql-00/","excerpt":"sql相关的问题与练习","text":"sql相关的问题与练习 环境本机mysql配置初始化密码遗失的解决方案 https://blog.csdn.net/m0_46278037/article/details/113923726","categories":[],"tags":[]},{"title":"儒猿面试之一","slug":"ry-00","date":"2021-09-20T14:34:49.000Z","updated":"2021-09-28T14:44:07.451Z","comments":true,"path":"2021/09/20/ry-00/","link":"","permalink":"https://shadowbynl.github.io/2021/09/20/ry-00/","excerpt":"中华石杉面试专题 高频考题篇","text":"中华石杉面试专题 高频考题篇 一 概述二 集合1 HashMap相关 2","categories":[],"tags":[]},{"title":"test-qa","slug":"test-qa","date":"2021-09-15T08:17:23.000Z","updated":"2021-09-17T05:41:54.510Z","comments":true,"path":"2021/09/15/test-qa/","link":"","permalink":"https://shadowbynl.github.io/2021/09/15/test-qa/","excerpt":"","text":"mysqlNavicat运行SQL文件出错https://zhidao.baidu.com/question/525156367906044565.html 计算机网络TCP中的seq 什么意思https://zhidao.baidu.com/question/346839619.htmlhttps://www.cnblogs.com/vvull/p/10597881.html 项目创建springboot项目不成功的问题（网络连接） 网络换成热点（不一定） 创建不成功 https://blog.csdn.net/qq_26071319/article/details/106209405http://start.aliyun.com 代理 pom报红https://blog.csdn.net/feifeiwuxian/article/details/1093341011234567&lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;&lt;/mirror&gt; https://blog.csdn.net/qq_41205651/article/details/114854831File -&gt; Invalidate Caches / Restart... -&gt; Invalidate and Restart","categories":[],"tags":[]},{"title":"jf","slug":"jf","date":"2021-09-13T13:10:02.000Z","updated":"2021-09-16T08:44:38.265Z","comments":true,"path":"2021/09/13/jf/","link":"","permalink":"https://shadowbynl.github.io/2021/09/13/jf/","excerpt":"","text":"java框架的基本概念与使用相关 ssm springboot等 mybatis配置解析映射文件和注解动态sql复杂实体关系缓存 spring控制反转 依赖注入代理模式 AOP整合声明式事务 springmvcdispatcherServlet原理 restful 请求参数 返回 乱码 json","categories":[],"tags":[]},{"title":"javaweb","slug":"javaweb","date":"2021-09-13T07:55:30.000Z","updated":"2021-09-13T09:08:05.879Z","comments":true,"path":"2021/09/13/javaweb/","link":"","permalink":"https://shadowbynl.github.io/2021/09/13/javaweb/","excerpt":"","text":"jdbcsmbms","categories":[{"name":"java","slug":"java","permalink":"https://shadowbynl.github.io/categories/java/"}],"tags":[]},{"title":"关于编程学习的问题","slug":"abstj","date":"2021-09-10T16:08:33.000Z","updated":"2021-09-11T12:26:54.797Z","comments":true,"path":"2021/09/11/abstj/","link":"","permalink":"https://shadowbynl.github.io/2021/09/11/abstj/","excerpt":"夏令营结束后的八月，心还是有些浮的，一直想回家回不成，所谓准备实习，但实际每天花在准备上的工夫很少，不够专注，效果很差。到九月初回顾自己的技术体系，发现有很多漏洞和模糊的地方，这时候认识到对于找这样的后端开发的工作来说，不专注地学习其基础的方方面面再去看面经总结，而是直接被动接收一些很粗略的知识，是绝对不能应付找工作的要求的。如果以后想干开发，在现在这么卷的情况下，不沉下心来学习准备，而是抱着一个“顺便”的态度，很难会有什么作为。近来先后找过同样学习后端开发的同学聊过两次（已有腾讯网易），对我有些启发，在这篇中简单总结下，同时后续关于总体学习的反思也在此记述。","text":"夏令营结束后的八月，心还是有些浮的，一直想回家回不成，所谓准备实习，但实际每天花在准备上的工夫很少，不够专注，效果很差。到九月初回顾自己的技术体系，发现有很多漏洞和模糊的地方，这时候认识到对于找这样的后端开发的工作来说，不专注地学习其基础的方方面面再去看面经总结，而是直接被动接收一些很粗略的知识，是绝对不能应付找工作的要求的。如果以后想干开发，在现在这么卷的情况下，不沉下心来学习准备，而是抱着一个“顺便”的态度，很难会有什么作为。近来先后找过同样学习后端开发的同学聊过两次（已有腾讯网易），对我有些启发，在这篇中简单总结下，同时后续关于总体学习的反思也在此记述。 一、一个专注的态度和学习方法其实回顾我过去这二十年，很难说我真正学会了什么技能，很多事浅尝辄止，很多事勉强应付。到现在能通过保研拿到这么一个打黑工的机会已经算是我牺牲比别人多几倍的时间（浪费）而争取到的一个并不怎么样的结果。未来靠什么才能生存，需要真正学会什么，我一直都很清楚，但态度和做法实际并不坚定。长久以来，我习惯看视频教程草草学习，看别人怎么做，但自己很少有练习思考，也很少有总结。往往事情一多起来，我就会中断技术的学习，很多东西一直反复，导致目前很难说掌握了什么技术。这种轻慢的应对技术学习的态度，导致的虚浮的技术水平，进而使我本人内心各方面其实都相当不自信。到现在这个阶段，今年的冬天我就要22周岁了，身体素质差，眼下较不抵触的路就是之后两年去南软外包公司去挣4k的月薪，而选择这条意味着未来我将走死开发这条路了。一个电子信息的硕士，学不到新的研究生阶段才能学到的知识，也不会有曾经渴望的导师的引导，有的只是在用身体换钱一条路走到黑的未来，对于我来说其实也算是较适合的了。不太想科研，也欠缺交际的能力，选择了计算机专业的话还是走开发较好，在这种意义上南软是个尚可的选择，算是有了title也有了一个缓冲学习的机会。如果我做了这样的选择，我未来三年内将完全以java开发为主了。和本科前三年的学习完全不同，前三年是在水绩点、竞赛等的同时自学编程，有一段没一段的，总会为完成课内的很多事而中断技术学习很长时间。而未来三年，在完全就业导向下，java这条线就是我主修的，学用、做项目就是我必须投入的。为了在研一的暑假能找到一份尚可不那么累的工作，我必须从现在开始，投入进去，可能这个学期的实习不太好找，但一定要开始打基础，奠定随时能找面试找工作的知识基础，本科毕业前，必须去尝试找实习找工作，至少得参加几十次面试积累经验，这样过渡到研究生再做一年开发后，才算好做一些。因此，我现在要做的是，明确该如何继续学习下去，需要看什么如何做，应该持有一个怎样的态度。 二、差异是如何造成的一年前的暑假基本算是我后端开发技能最熟练的时候了，那时候为完成课设和竞赛等差不多自己完整写过四五个web系统或桌面程序，到暑假给学院开发科研信息系统时我也是搭建基础环境框架、编写原始文档的主力，我的同学那时候刚接触web开发，还有很多问题需要问我。到大三以后，纠结于考研保研中很多时间不知不觉挥霍，结果保研考研没准备，项目也没怎么做，很多是在原来写的系统上修修改改，很多方面变得生疏了。而我的同学从今年年初开始准备面试和实习，每天花相当多的时间看书做笔记写算法题，逐一攻克java基础的各方面，稳扎稳打，其实半年左右，已经足够对javase、并发编程、虚拟机、框架等各方面有一个深入的认知了，同时做做项目，在校招中已经足够获得不错的offer了。可以说，一年过后，我现在不管从理论还是实操上都差了不少了。很大程度上是我过去半年的重心不在就业准备上面，但更重要的其实是我学习的方法和态度、认知不正确。我不管学什么，总是先找很多参考的资料，选择很长时间，再开始，但往往坚持不长时间就因其他事情而放弃，最终收效甚微。我可是太喜欢反思总结，而不去切实学习了。学而不思则罔，思而不学则殆。眼下最重要的就是调整认知，走入java技术体系的一个正常的学习路线。 三、方法通过与同学的交流，我认识到，对校招而言（暂时不谈社招），基础很重要，开发相关的理论也很多。 java相关的知识体系 javase 十几个方面 juc并发编程 netty rpc jvm 数据库 中间件 设计模式 计算机基础 而对于这样的基础理论的学习与实践，之前我的认知是视频教程+面经，可能很多人也是这么做的，但我确实这样做了之后感觉吸收不多，不踏实，可能是不够专注，但我同时也一直都清楚看书去学习技术，看文档才是搞开发最正的路线，再多的视频等也是给你提炼知识的，而且学习效果可能会比较差，所以这些基础理论的学习必须看书细过+实践。 考查的重心 微服务从来不是基础考核的重心，因此与其关注复杂的微服务项目，不如先学好基础的理论和做做基本全面的项目。 牛客的用处 算法题目 面经 项目 关键是什么 看的多，全面，关键是思想 具体123java这个ks路线还得走完框架，然后基础还得那么过但有些书得开始计划看了，初步决定在平板上看，博客做笔记，同时实践（需要先整下平板里以前的笔记） 书 java核心技术卷一/卷二 深入理解java虚拟机 第三版 java并发编程的艺术 java并发编程实战 网络 图解http 图解tcp 自顶向下 谢希仁 计算机基础 深入理解计算机系统 春风 1忽然意识到cs科班生应该沉下心研读些cs体系的东西","categories":[],"tags":[]},{"title":"java-qa","slug":"java-qa","date":"2021-09-05T15:12:24.000Z","updated":"2021-09-07T01:09:19.889Z","comments":true,"path":"2021/09/05/java-qa/","link":"","permalink":"https://shadowbynl.github.io/2021/09/05/java-qa/","excerpt":"","text":"可重入锁虚假唤醒COWcas compareandset","categories":[],"tags":[]},{"title":"wsl相关配置","slug":"env-wsl","date":"2021-09-03T02:35:30.000Z","updated":"2021-09-10T03:53:39.571Z","comments":true,"path":"2021/09/03/env-wsl/","link":"","permalink":"https://shadowbynl.github.io/2021/09/03/env-wsl/","excerpt":"为允许大四上人工神经网络的程序，需要配置wsl2上的cuda相关环境，现记述一下相关过程与参考","text":"为允许大四上人工神经网络的程序，需要配置wsl2上的cuda相关环境，现记述一下相关过程与参考 1 介绍 2 本机cuda相关配置 3 关于wsl2的测试 win10虚拟机的问题 修改用户密码 安装图形界面 安装MySql8.0 文件传送 备份 4 wsl2 cuda配置 4.1 官网文档（校园网打不开） 4.2 cuda相关 4.3 综上 4.4 其他方案 1 介绍https://docs.microsoft.com/zh-cn/windows/wsl/abouthttps://docs.microsoft.com/zh-cn/windows/wsl/install-win10本机在2021.4.30时安装过wsl2 ubuntu2 2 本机cuda相关配置本机目前环境为cuda11.0 gpu为rtx3060 3 关于wsl2的测试win10虚拟机的问题 这里先提一下之前在win10上安装vmware后没法开启虚拟机的问题 这里进行详细记述，简单说就是win10本身的虚拟机功能和vmware冲突参考 https://www.chenkaihua.com/2019/09/23/hyper-off/ 12345安装virtualbox后发现开启不了虚拟机，根据网上资料得知，是因为微软默认开启了hyper-v,即便是在启用或关闭Windows功能里不启用Hyper-V,也不能解决问题，需要解决的话就需要彻底关闭hyper-v功能。从知乎问题上(Windows 10 下如何彻底关闭 Hyper-V 服务？ - 张林军的回答 - 知乎)找到了最简单的解决办法。快捷键win+x,使用管理员权限打开Windows Powershell关闭：bcdedit /set hypervisorlaunchtype off开启: bcdedit /set hypervisorlaunchtype auto 修改用户密码123456789win10中WSL登录是不用密码的，当需要使用用户权限但是忘记密码的时候，可以使用如下办法以root身份登录WSL并重置密码1、以管理员身份打开 PowerShell ;2、输入命令 wsl.exe --user root ;3、命令 passwd root 修改 root 用户密码。忘记其他用户密码supasswd 用户名 参考https://www.cnblogs.com/my-blogs-for-everone/articles/13973872.htmlhttps://blog.csdn.net/qq_28120227/article/details/100677167 安装图形界面https://www.bilibili.com/video/BV1LA411n7BK?spm_id_from=333.999.0.0 12345678910sudo apt update &amp;&amp; apt upgradesudo apt install xrdpsudo apt install xfce4 xfce4-goodiessudo vim /etc/xrdp/xrdp.iniecho xfce4-session &gt; ~/.xsessionsudo vim /etc/xrdp/startwm.shsudo /etc/init.d/xrdp startip asudo apt install firefox 安装MySql8.01234567891011121314151617181920212223安装mysqlsudo apt-get install mysql-serversudo apt-get install mysql-clientsudo apt-get install libmysqlclient-dev查看默认密码sudo cat /etc/mysql/debian.cnf默认方式登陆mysql -u debian-sys-maint -p // 用户名以自己的配置文件为准更改密码mysql&gt;use mysql;mysql&gt;flush privileges;mysql&gt;ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;你的密码&#x27;;mysql&gt;flush privileges;重启服务sudo service mysql restart开启端口vim /etc/mysql/mysql.conf.d/mysqld.cnf 注释掉 bind-address = 127.0.0.1允许访问use mysql;select host from user where user = &#x27;root&#x27;;update user set host = &#x27;%&#x27; where user = &#x27;root&#x27;;flush privileges; 参考https://www.jianshu.com/p/99c4baca1983https://www.cnblogs.com/xiaozhounandu/p/14497835.htmlhttps://www.cnblogs.com/patrickding/p/6435459.htmlhttps://blog.csdn.net/iiiiiilikangshuai/article/details/100905996补充vimhttps://blog.csdn.net/yang1393214887/article/details/106233991https://blog.csdn.net/weixin_40853073/article/details/81707177 文件传送https://blog.csdn.net/x356982611/article/details/80077085 备份4 wsl2 cuda配置 先说结论：总体上完成配置的要求有1 硬件2 驱动3 wsl上的专用cuda4 dev通道的windows先后参照一个去年的视频教程、多篇博客、官网文档，在20.04 18.04等上先后安了三个版本的cuda，均测试失败，暂认为是没有安装dev预览版windows所致，但若进入dev通道升级为win11，对本机系统的稳定性有影响，也不容易回退，所以暂时放弃这个方案。下面记述一下过程及参考 4.1 官网文档（校园网打不开）https://docs.nvidia.com/cuda/wsl-user-guide/index.html#rel-460-15本机安装驱动和dev通道情况下，执行以下命令 1234567$ wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin$ sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600$ wget https://developer.download.nvidia.com/compute/cuda/11.4.0/local_installers/cuda-repo-wsl-ubuntu-11-4-local_11.4.0-1_amd64.deb$ sudo dpkg -i cuda-repo-wsl-ubuntu-11-4-local_11.4.0-1_amd64.deb$ sudo apt-key add /var/cuda-repo-wsl-ubuntu-11-4-local/7fa2af80.pub$ sudo apt-get update$ sudo apt-get -y install cuda 测试 123$ cd /usr/local/cuda-11.4/samples/4_Finance/BlackScholes$ make BlackScholes$ ./BlackScholes 在本机上，测试失败，提示大意为找不到驱动/gpuCUDA error at ../../common/inc/helper_cuda.h:779 code=35(cudaErrorInsufficientDriver) &quot;cudaGetDevicehttps://developer.nvidia.com/cuda/wsl/download 4.2 cuda相关安装好没有自动配置环境变量，手动配置https://blog.csdn.net/yinxian9019/article/details/106756280/ 阿里云cuda镜像https://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/https://mirrors.aliyun.com/nvidia-cuda/ubuntu2004/x86_64/ 卸载现有驱动/cuda1234$ sudo apt-get remove --purge nvidia-* $ sudo apt-get autoremovedpkg -l | grep -i nvidia https://blog.csdn.net/weixin_32820767/article/details/83818885https://qastack.cn/ubuntu/206283/how-can-i-uninstall-a-nvidia-driver-completely 几种方案，但没有参考价值（都更新太快了）https://www.bilibili.com/video/BV1FZ4y1p7Qp?spm_id_from=333.999.0.0https://blog.csdn.net/qq_20291997/article/details/106897324https://blog.csdn.net/weixin_36815313/article/details/107641262https://zhuanlan.zhihu.com/p/152533150https://zhuanlan.zhihu.com/p/122286055 各种报错NVIDIA-SMI has failed because it couldn&#39;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.https://zhuanlan.zhihu.com/p/89714824https://blog.csdn.net/weixin_42084747/article/details/84371079?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link ubuntu卸载https://blog.csdn.net/weixin_33711641/article/details/90386490?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.control&amp;spm=1001.2101.3001.4242https://blog.csdn.net/qq_38410428/article/details/82930814 比较有价值的参考方案，但还是失败了，和官网错误类似https://blog.csdn.net/u010953692/article/details/113830046 123456wget https://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/cuda-ubuntu1804.pinsudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600sudo apt-key adv --fetch-keys https://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/7fa2af80.pubsudo add-apt-repository &quot;deb https://mirrors.aliyun.com/nvidia-cuda/ubuntu1804/x86_64/ /&quot;sudo apt-get updatesudo apt-get -y install cuda 4.3 综上基本可以判断是没有用dev通道的问题，参考一篇博客的评论（五月左右）提到切换到dev通道按官网方式就成功了，但这样风险有些大，所以不再尝试。https://zhuanlan.zhihu.com/p/386362341 极不容易回退，也不稳定 4.4 其他方案1.本机上是有完整可用的cuda+opencv的环境的，就看代码怎么改了。。2.先下数据集，数据集官方的下载速度很慢（校园网），一般找不到其他的就得耗流量了。。 hmdb51https://www.pianshen.com/article/1325689931/https://serre-lab.clps.brown.edu/resource/hmdb-a-large-human-motion-database/ucf101https://blog.csdn.net/weixin_40162095/article/details/111870161 其他https://blog.csdn.net/alec1987/article/details/69388699?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.no_search_link","categories":[],"tags":[]},{"title":"输入输出","slug":"dsa-io","date":"2021-09-01T09:52:41.000Z","updated":"2021-09-01T09:56:53.571Z","comments":true,"path":"2021/09/01/dsa-io/","link":"","permalink":"https://shadowbynl.github.io/2021/09/01/dsa-io/","excerpt":"","text":"c++https://www.cnblogs.com/Mary-Sue/p/8678462.html java","categories":[],"tags":[]},{"title":"信息检索系统","slug":"ds-xxjsxt","date":"2021-09-01T06:00:27.000Z","updated":"2021-09-01T06:00:54.743Z","comments":true,"path":"2021/09/01/ds-xxjsxt/","link":"","permalink":"https://shadowbynl.github.io/2021/09/01/ds-xxjsxt/","excerpt":"","text":"","categories":[{"name":"大四","slug":"大四","permalink":"https://shadowbynl.github.io/categories/%E5%A4%A7%E5%9B%9B/"}],"tags":[]},{"title":"网络安全","slug":"ds-net","date":"2021-09-01T01:55:32.000Z","updated":"2021-09-15T02:37:45.398Z","comments":true,"path":"2021/09/01/ds-net/","link":"","permalink":"https://shadowbynl.github.io/2021/09/01/ds-net/","excerpt":"大四上学期网络安全选修课课程内容","text":"大四上学期网络安全选修课课程内容 1 概述12345678910111213141516171. TCP连接为什么需要三次握手？两次握手是否可以？答：为了实现可靠数据传输， TCP 协议的通信双方， 都必须维护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤。如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认。举例表述：防止失效的连接请求报文段被服务端接收，从而产生错误。 首先需要解释失效的连接请求是什么：若客户端向服务端发送的连接请求丢失，客户端等待应答超时后就会再次发送连接请求，此时，上一个连接请求就是失效的连接请求。假如建立连接只需两次握手，对于客户端来说并没有太大的变化。但仍然需要获得服务端的应答后才进入ESTABLISHED（建立）状态。而服务端在收到连接请求后就进入ESTABLISHED状态。此时如果网络拥塞，客户端发送的连接请求迟迟到不了服务端，客户端便超时重发请求，如果服务端正确接收并确认应答，双方便开始通信，通信结束后释放连接。此时，如果那个失效的连接请求抵达了服务端，由于只有两次握手，服务端收到请求就会进入ESTABLISHED状态，等待发送数据或主动发送数据。但此时的客户端早已进入CLOSED状态，服务端将会一直等待下去，这样浪费服务端连接资源。https://blog.csdn.net/lengxiao1993/article/details/82771768?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.essearch_pc_relevant&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-3.essearch_pc_relevanthttps://blog.csdn.net/AntdonYu/article/details/1037655532. 什么是TCP半开连接？客户端向服务端发送SYN建立连接请求，服务端响应SYN-ACK建立连接，即为TCP半开连接。3. SYN Flood属于哪种攻击？SYN Flood (SYN泛洪) 是种典型的DoS (Denial of Service，拒绝服务) 攻击，效果是服务器TCP连接资源耗尽，停止响应正常的TCP连接请求。https://blog.csdn.net/chenyulancn/article/details/788325974.什么是字典攻击？在破解密码或密钥时，逐一尝试用户自定义词典中的可能密码（单词或短语）的攻击方式。与暴力破解的区别是，暴力破解会逐一尝试所有可能的组合密码，而字典式攻击会使用一个预先定义好的单词列表（可能的密码）。5. ARP欺骗的原理是什么？ARP(Address Resolution Protocol，地址解析协议)是一个位于TCP/IP协议栈中的低层协议，负责将某个IP地址解析成对应的MAC地址。从影响网络连接通畅的方式来看，ARP欺骗分为二种，一种是对路由器ARP表的欺骗;另一种是对内网PC的网关欺骗。第一种ARP欺骗的原理是——截获网关数据。它通知路由器一系列错误的内网MAC地址，并按照一定的频率不断进行，使真实的地址信息无法通过更新保存在路由器中，结果路由器的所有数据只能发送给错误的MAC地址，造成正常PC无法收到信息。第二种ARP欺骗的原理是——伪造网关。它的原理是建立假网关，让被它欺骗的PC向假网关发数据，而不是通过正常的路由器途径上网。在PC看来，就是上不了网了，“网络掉线了”。https://www.xuexila.com/luyouqi/120948.htmlhttps://jingyan.baidu.com/article/fea4511a7a2020f7bb91252a.html 2 密码体制与技术12345678910111213141516171.三重DES为什么是加密-解密-加密三重DES(triple-des)是为了增加DES的强度,将DES重复3次所得到的一种密码算法,也称为TDEA(Triple Date Encryption Algorithm),通常缩写为3DES。三重DES并不是进行三次DES加密(加密→加密→加密),而是加密→解密→加密的过程,目的是为了让三重DES能够兼容普通的DES。当三重DES中所有的密钥都相同时,三重DES也就等同于普通的DES了。这是因为在前两步加密→解密之后,得到的就是最初的明文。因此,以前用DES加密的密文,就可以通过这种方式用三重DES来进行解密。也就是说,三重DES对DES具备向下兼容性。2.密钥是不是越长越好密码体制的安全性，其并不是仅仅由密钥的长度决定的，但是在同一个密码体制中，越长的密钥意味着密钥空间越大，敌手通过暴力穷举的方式得到真实密钥的情况更加难以发生，在这种意义上讲，同一种密码体制中，体制的安全性与密钥的长度相关。3.对称密码的优点是什么以及缺点是什么优点算法简单、速度快、适合加密大量数据缺点密钥管理方面如何安全的共享秘密密钥，不可能与你未曾谋面的人通信每对通信者间都需要一个不同的密钥，当用户量增大时密钥空间急剧增大。没有解决不可抵赖问题没有解决不可抵赖问题 参考https://www.cnblogs.com/songwenlong/p/5944139.htmlhttps://www.sohu.com/a/278245376_100245441https://www.zhihu.com/question/365630892 matlab图像置乱参考https://blog.csdn.net/qq_33472557/article/details/79668662https://ww2.mathworks.cn/help/matlab/ref/rgb2gray.htmlhttps://www.cnblogs.com/wxl845235800/p/7216785.htmlhttps://jingyan.baidu.com/article/ed15cb1b3e94da5be269810f.htmlhttps://ww2.mathworks.cn/help/matlab/ref/imread.html matlab 图片相关的问题 imshow image https://tieba.baidu.com/p/6492190181图片分量提取 https://jingyan.baidu.com/article/456c463b41de5f0a5831448e.htmllinux移动文件 https://www.cnblogs.com/aiyr/p/7395738.htmlubuntu创建用户https://blog.csdn.net/taolusi/article/details/81304057“const char *” 类型的实参与 “char *” 类型的形参不兼容错误的解决方法https://blog.csdn.net/qinshiyang/article/details/83213664cvwaitkey未定义标识符https://blog.csdn.net/baidu_38172402/article/details/87982268hhu推免 https://cies.hhu.edu.cn/2020/0924/c4093a213007/page.pspimresizehttps://baike.baidu.com/item/imresize/9948188?fr=aladdinmatlab输入输出https://blog.csdn.net/yewuzhitou/article/details/81906379matlab 技巧 figurehttps://blog.csdn.net/hyz301/article/details/64130405matlab将灰度图转化为彩图https://blog.csdn.net/felix_zhangshou/article/details/88915229?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.no_search_link&amp;spm=1001.2101.3001.4242http://blog.sina.com.cn/s/blog_a5fdbf010101hhyk.html置乱https://blog.csdn.net/qq_25884463/article/details/52463788https://wenku.baidu.com/view/7c3c84f2580102020740be1e650e52ea5418ce81.html?rec_flag=default&amp;fr=Recommend_RelativeDoc-60354,60273,60321,40251-kpdrec_doc_pc_view-203b4e017dd5360cba1aa8114431b90d6d85895a&amp;sxts=1631104444164https://wenku.baidu.com/view/203b4e017dd5360cba1aa8114431b90d6d85895a.htmlhttps://blog.csdn.net/qq_33472557/article/details/79668662 非对称加密技术组合A–B1 会话密钥加密明文2 明文哈希–数字签名–A私钥加密3 B公钥加密会话密钥B–A1 B私钥解密会话密钥2 获取明文3 明文哈希–数字签名+A公钥–比较 3 PKI技术中间人攻击数字证书 权威机构CA内容 格式数字签名 CA的私钥对哈希过的数字证书进行签名根证书通信实例","categories":[{"name":"大四","slug":"大四","permalink":"https://shadowbynl.github.io/categories/%E5%A4%A7%E5%9B%9B/"}],"tags":[]},{"title":"排序","slug":"dsa-sort","date":"2021-09-01T01:05:58.000Z","updated":"2021-09-01T03:52:31.934Z","comments":true,"path":"2021/09/01/dsa-sort/","link":"","permalink":"https://shadowbynl.github.io/2021/09/01/dsa-sort/","excerpt":"排序相关算法与问题","text":"排序相关算法与问题 排序算法模板快速排序1234567891011121314151617181920212223242526272829303132#include &lt;iostream&gt;using namespace std;int a[100010];void quick_sort(int n[], int l, int r) &#123; if (l &gt;= r) &#123; return; &#125; int p = n[l + r &gt;&gt; 1]; int i = l - 1, j = r + 1; while (i &lt; j) &#123; while(n[++i] &lt; p); while(n[--j] &gt; p); if (i &lt; j) &#123; swap(n[i], n[j]); &#125; &#125; quick_sort(n, l, j); quick_sort(n, j + 1, r);&#125;int main() &#123; int n; scanf(&quot;%d&quot;, &amp;n); for (int i = 0; i &lt; n; i++) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125; quick_sort(a, 0, n - 1); for (int i = 0; i &lt; n; i++) &#123; printf(&quot;%d &quot;, a[i]); &#125;&#125; 123456789101112131415161718192021222324252627public class TestSort &#123; public static void main(String[] args) &#123; int[] nums = &#123;22, 34, 1, 2, 0, 44, 553, 2, 3&#125;; quickSort(nums, 0, nums.length - 1); for (int x : nums) &#123; System.out.println(x); &#125; &#125; public static void quickSort(int[] nums, int l, int r) &#123; if (l &gt;= r) return; int xi = (int)(Math.random() * (r - l) + l); int x = nums[xi]; int i = l - 1, j = r + 1; while (i &lt; j) &#123; while (nums[++i] &lt; x); while (nums[--j] &gt; x); if (i &lt; j) &#123; int tmp = nums[i]; nums[i] = nums[j]; nums[j] = tmp; &#125; &#125; quickSort(nums, l, j); quickSort(nums, j + 1, r); &#125;&#125; 归并排序123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;using namespace std;const int N = 1e6 + 10;int a[N];int b[N];void merge_sort(int a[], int l, int r) &#123; if (l &gt;= r) &#123; return; &#125; int m = l + r &gt;&gt; 1; merge_sort(a, l, m); merge_sort(a, m + 1, r); int k = 0; int i = l, j = m + 1; while (i &lt;= m &amp;&amp; j &lt;= r) &#123; if (a[i] &lt;= a[j]) &#123; b[k++] = a[i++]; &#125; else &#123; b[k++] = a[j++]; &#125; &#125; while (i &lt;= m) &#123; b[k++] = a[i++]; &#125; while (j &lt;= r) &#123; b[k++] = a[j++]; &#125; for (int i = 0; i &lt; k; i++) &#123; a[l + i] = b[i]; &#125;&#125;int main() &#123; int n; scanf(&quot;%d&quot;, &amp;n); for (int i = 0; i &lt; n; i++) &#123; scanf(&quot;%d&quot;, &amp;a[i]); &#125; merge_sort(a, 0, n - 1); for (int i = 0; i &lt; n; i++) &#123; printf(&quot;%d &quot;, a[i]); &#125;&#125; 排序相关问题第k个数（快速排序）acwing786 leetcode215https://www.acwing.com/problem/content/788/https://www.acwing.com/solution/content/63587/ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// 时间复杂度：O(n), 空间复杂度: 递归栈空间O(logn)// y总 代码 没有 随机选取 x , 导致 用时比较长 44ms. 随机后 4ms// 如果 x 每次都选 nums[l] 或 nums[r], 碰到 升序或降序的 极端样例, 时间O(n^2),, 用时会很久// 而且 nums[l] 和 nums[r] 的代码边界不一样, 容易出错, 建议选 nums[l + r &gt;&gt; 1]// 选取 nums[l] 的 用时 在 40ms 左右, 选取 nums[r]需要修改一下边界情况, 没有改, 应该也40ms左右// 选取 nums[l + r &gt;&gt; 1] 跟 随机选取 nums[rand() % (r - l + 1) + l] 时间差不多, 在 4ms 左右class Solution &#123;public: int quick_select(vector&lt;int&gt;&amp; nums, int l, int r, int k) &#123; if (l &gt;= r) return nums[l]; // int i = l - 1, j = r + 1, x = nums[l + r &gt;&gt; 1]; // 选取 nums[l], 极端样例 时间会很久 int x = nums[rand() % (r - l + 1) + l], i = l - 1, j = r + 1; // 随机选取 while (i &lt; j) &#123; do i ++ ; while (nums[i] &gt; x); do j -- ; while (nums[j] &lt; x); if (i &lt; j) swap(nums[i], nums[j]); &#125; if (k &lt;= j - l + 1) return quick_select(nums, l, j, k); else return quick_select(nums, j + 1, r, k - (j - l + 1)); &#125; int findKthLargest(vector&lt;int&gt;&amp; nums, int k) &#123; srand(time(0)); // 随机种子 return quick_select(nums, 0, nums.size() - 1, k); &#125;作者：yxc链接：https://www.acwing.com/video/1589/来源：AcWing著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。// 时间复杂度：O(n), 空间复杂度: O(1)// y总 代码 去掉递归栈空间, 用 while 循环, 就不用 递归栈空间 了.// 原来的 递归 只是 相同的代码, 只不过 递归时 递归的参数 区间端点值 l,r 以及 k变了// 这里 while 每次循环 也是 用 相同的代码, 只不过 是 每次循环之后 将 l,r 以及 k 更新class Solution &#123;public: int quick_select(vector&lt;int&gt;&amp; nums, int l, int r, int k) &#123; while(true) &#123; if (l == r) return nums[l]; // int i = l - 1, j = r + 1, x = nums[l + r &gt;&gt; 1]; // 选取 nums[l], 极端样例 时间会很久 int x = nums[rand() % (r - l + 1) + l], i = l - 1, j = r + 1; // 随机选取 while (i &lt; j) &#123; do i ++ ; while (nums[i] &gt; x); do j -- ; while (nums[j] &lt; x); if (i &lt; j) swap(nums[i], nums[j]); &#125; // 将 递归 的 参数l,r,k变化 改为 while 循环中 l,r,k 更新, 省去递归栈空间 // if (k &lt;= j - l + 1) return quick_select(nums, l, j, k); if (k &lt;= j - l + 1) r = j; // else return quick_select(nums, j + 1, r, k - (j - l + 1)); else k = k - (j - l + 1), l = j + 1; // 注意 k更新用到 l, 所以 l 更新应该在 k更新之后 &#125; &#125; int findKthLargest(vector&lt;int&gt;&amp; nums, int k) &#123; srand(time(0)); // 随机种子 return quick_select(nums, 0, nums.size() - 1, k); &#125;&#125;;作者：yxc链接：https://www.acwing.com/video/1589/来源：AcWing著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 注意 c++的rand()函数https://blog.csdn.net/cmm0401/article/details/54599083 123456789101112131415161718192021222324252627282930313233343536373839404142C++中rand() 函数的用法1、rand()不需要参数，它会返回一个从0到最大随机数的任意整数，最大随机数的大小通常是固定的一个大整数。2、如果你要产生0~99这100个整数中的一个随机整数，可以表达为：int num = rand() % 100; 这样，num的值就是一个0~99中的一个随机数了。3、如果要产生1~100，则是这样：int num = rand() % 100 + 1; 4、总结来说，可以表示为：int num = rand() % n +a; 其中的a是起始值，n-1+a是终止值，n是整数的范围。5、一般性：rand() % (b-a+1)+ a ; 就表示 a~b 之间的一个随机整数。6、若要产生0~1之间的小数，则可以先取得0~10的整数，然后均除以10即可得到“随机到十分位”的10个随机小数。 若要得到“随机到百分位”的随机小数，则需要先得到0~100的10个整数，然后均除以100，其它情况依 此类推。7、通常rand()产生的随机数在每次运行的时候都是与上一次相同的，这样是为了便于程序的调试。 若要产生每次不同的随机数，则可以使用srand( seed )函数进行产生随机化种子，随着seed的不同，就能够产生 不同的随机数。8、还可以包含time.h头文件，然后使用srand(time(0))来使用当前时间使随机数发生器随机化，这样就可以保证每两 次运行时可以得到不同的随机数序列，同时这要求程序的两次运行的间隔超过1秒。9、举例如下：rand（产生随机数）表头文件: #include&lt;stdlib.h&gt;定义函数 :int rand(void)函数说明 :因为rand() 的内部实现是用线性同余法做的，它不是真的随机数，只不过是因为其周期特别长，所以有一定的范围里可看成是随机的，rand() 会返回一随机数值，范围在 0 至 RAND_MAX 间。在调用此函数产生随机数前，必须先利用 srand()设置好随机数种子，如果未设随机数种子，rand()在调用时会自动设随机数种子为 1。rand()产生的是假随机数字，每次执行时是相同的。若要不同,以不同的值来初始化它.初始化的函数就是 srand()。返回值:返回 0 至 RAND_MAX 之间的随机整数值，RAND_MAX 的范围最少是在 32767 之间（int），即双字节（16位数）。若用unsigned int 双字节是 65535，四字节是 4294967295 的整数范围。0~RAND_MAX 每个数字被选中的机率是相同的。 java随机数https://www.cnblogs.com/blogxjc/p/9687297.html","categories":[{"name":"算法","slug":"算法","permalink":"https://shadowbynl.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"字符串","slug":"dsa-string","date":"2021-08-31T07:13:08.000Z","updated":"2021-09-01T03:52:43.860Z","comments":true,"path":"2021/08/31/dsa-string/","link":"","permalink":"https://shadowbynl.github.io/2021/08/31/dsa-string/","excerpt":"对字符串相关问题进行记录","text":"对字符串相关问题进行记录 字符串匹配朴素模式匹配 KMP算法 相关题目leetcode214https://leetcode-cn.com/problems/shortest-palindrome/ 1234567891011121314151617181920212223242526/*给定一个字符串 s，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。0 &lt;= s.length &lt;= 5 * 10^4s 仅由小写英文字母组成*/class Solution &#123;public: string shortestPalindrome(string s) &#123; string t(s.rbegin(), s.rend()); int n = s.size(); s = s + &#x27;#&#x27; + t; vector&lt;int&gt; ne(n * 2 + 2); ne[0] = -1; int i = 0, k = -1; while (i &lt; s.size()) &#123; while (k &gt;= 0 &amp;&amp; s[i] != s[k]) k = ne[k]; i++; k++; ne[i] = k; //cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; ne[i] &lt;&lt; &quot; &quot; &lt;&lt; s[i]&lt;&lt; endl; &#125; int len = ne[2 * n + 1]; string left = s.substr(0, len), right = s.substr(len, n - len); return string(right.rbegin(), right.rend()) + left + right; &#125;&#125;;","categories":[{"name":"算法","slug":"算法","permalink":"https://shadowbynl.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[]},{"title":"南软服务端开发","slug":"njuse-sever-development","date":"2021-08-30T15:42:34.000Z","updated":"2021-09-01T03:53:00.090Z","comments":true,"path":"2021/08/30/njuse-sever-development/","link":"","permalink":"https://shadowbynl.github.io/2021/08/30/njuse-sever-development/","excerpt":"南大软件本科服务端开发课程笔记","text":"南大软件本科服务端开发课程笔记","categories":[],"tags":[]},{"title":"javase之一","slug":"java-base-00","date":"2021-08-30T08:47:11.000Z","updated":"2021-09-07T12:57:43.160Z","comments":true,"path":"2021/08/30/java-base-00/","link":"","permalink":"https://shadowbynl.github.io/2021/08/30/java-base-00/","excerpt":"","text":"为重新巩固java基础，个人决定从javase开始到微服务等过一遍java技术体系。经过几天比对，发现很多培训课程为顾及学生讲的很繁琐，b站ks的视频相对较简洁。虽然可能存在不全、不准确、资料不太够的问题，但也有很大的学习参考价值。因此从本篇开始将按照ks提供的顺序，看视频、敲代码，并在这些文档中做些笔记。https://gitee.com/kuangstudy/kuang_livenote?_from=gitee_search","categories":[{"name":"java","slug":"java","permalink":"https://shadowbynl.github.io/categories/java/"}],"tags":[{"name":"javase","slug":"javase","permalink":"https://shadowbynl.github.io/tags/javase/"}]},{"title":"idea学习","slug":"idea-study","date":"2021-08-28T15:01:52.000Z","updated":"2021-08-30T02:09:13.147Z","comments":true,"path":"2021/08/28/idea-study/","link":"","permalink":"https://shadowbynl.github.io/2021/08/28/idea-study/","excerpt":"用了idea也快两年了，在此系统看一下idea专门的教程","text":"用了idea也快两年了，在此系统看一下idea专门的教程 模板参考先前的配置，具体配置方法参考下面的图 使新建类默认有类注释123456/*** @Auther: nlby* @Date: $&#123;DATE&#125; $&#123;TIME&#125; * @Description: $&#123;PACKAGE_NAME&#125;* @version: 1.0*/ 自定义类注释、方法注释模板1234567891011121314151617181920212223/** * * @name $NAME$ * @author nlby * @date $DATE$ */ /** * @author nlby * @description $description$ * @updateTime $date$ $TIME$ $param$ $return$ * @throws $throws$ */ 参数groovyScript(&quot;def result=&#x27;&#x27;; def stop=false; def params=\\&quot;$&#123;_1&#125;\\&quot;.replaceAll(&#x27;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); if (params.size()==1 &amp;&amp; (params[0]==null || params[0]==&#x27;null&#x27; || params[0]==&#x27;&#x27;)) &#123; stop=true; &#125;; if(!stop) &#123; for(i=0; i &lt; params.size(); i++) &#123;result +=((i==0) ? &#x27;\\\\r\\\\n&#x27; : &#x27;&#x27;) + ((i &lt; params.size() - 1) ? &#x27; * @param: &#x27; + params[i] + &#x27;\\\\r\\\\n&#x27; : &#x27; * @param: &#x27; + params[i] + &#x27;&#x27;)&#125;; &#125;; return result;&quot;, methodParameters())groovyScript(&quot;def result=&#x27;&#x27;; def stop=false; def params=\\&quot;$&#123;_1&#125;\\&quot;.replaceAll(&#x27;[\\\\\\\\[|\\\\\\\\]|\\\\\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); if (params.size()==1 &amp;&amp; (params[0]==null || params[0]==&#x27;null&#x27; || params[0]==&#x27;&#x27;)) &#123; stop=true; &#125;; if(!stop) &#123; for(i=0; i &lt; params.size(); i++) &#123;result +=((i==0) ? &#x27;\\\\r\\\\n&#x27; : &#x27;&#x27;) + ((i &lt; params.size() - 1) ? &#x27; * @param: &#x27; + params[i] + &#x27;\\\\r\\\\n&#x27; : &#x27; * @param: &#x27; + params[i] + &#x27;&#x27;)&#125;; &#125;; return result;&quot;, methodParameters())返回值groovyScript(&quot;def result=&#x27;&#x27;; def data=\\&quot;$&#123;_1&#125;\\&quot;; def stop=false; if(data==null || data==&#x27;null&#x27; || data==&#x27;&#x27; || data==&#x27;void&#x27; ) &#123; stop=true; &#125;; if(!stop) &#123; result += &#x27;\\\\r\\\\n&#x27; + &#x27; * @return: &#x27; + data; &#125;; return result;&quot;, methodReturnType())groovyScript(&quot;def result=&#x27;&#x27;; def data=\\&quot;$&#123;_1&#125;\\&quot;; def stop=false; if(data==null || data==&#x27;null&#x27; || data==&#x27;&#x27; || data==&#x27;void&#x27; ) &#123; stop=true; &#125;; if(!stop) &#123; result += &#x27;\\\\r\\\\n&#x27; + &#x27; * @return: &#x27; + data; &#125;; return result;&quot;, methodReturnType()) 注意：123一般步骤：创建模板组、创建模板、指定变量值、指定对某种语言使用上述模板中的方法注释需要在方法中生成注释，否则可能参数等生成有问题，且对返回值为void的情况，还需手动修改 插件https://www.bilibili.com/video/BV1zb4y1U7Fv配置https://www.bilibili.com/video/BV1Tg4y1B7nM11. 创建一个empty project让多个模块在项目空间同级显示（没有默认父模块）","categories":[{"name":"环境","slug":"环境","permalink":"https://shadowbynl.github.io/categories/%E7%8E%AF%E5%A2%83/"}],"tags":[]},{"title":"2021年八月底总结","slug":"202108summary","date":"2021-08-27T16:35:13.000Z","updated":"2021-08-28T08:32:45.133Z","comments":true,"path":"2021/08/28/202108summary/","link":"","permalink":"https://shadowbynl.github.io/2021/08/28/202108summary/","excerpt":"在该站点重新开始维护个人博客。 从2020年2月开始接触hexo博客，其后到2020年11月左右断断续续写了一百多篇博客，但后面由于到大三的一个比较迷茫和紧张的时期就慢慢不再维护博客了，总体上先前的博客分类和标签有些混乱冗余了，同时域名也到期，图床也存在一些失效的风险，于是决定在本人的这第二个github账号下建立仓库重新开始维护一个新的个人博客，计划是长期性的，因此：域名就采用github.io的域名，图片直接存储在本地和仓库中，而先前的文章后续有时间再作整理和迁移。这篇写于2021年8月底，本人大四上学期开始前几天，算是一个大学与未来研究生生活承前启后的一个阶段，因此在该站点的这第一篇文章中打算记述一下前一段时间（保研，简要记述，详细内容以后有时间或者等完全结束再写）和之后的两个月内的一个大致的安排。","text":"在该站点重新开始维护个人博客。 从2020年2月开始接触hexo博客，其后到2020年11月左右断断续续写了一百多篇博客，但后面由于到大三的一个比较迷茫和紧张的时期就慢慢不再维护博客了，总体上先前的博客分类和标签有些混乱冗余了，同时域名也到期，图床也存在一些失效的风险，于是决定在本人的这第二个github账号下建立仓库重新开始维护一个新的个人博客，计划是长期性的，因此：域名就采用github.io的域名，图片直接存储在本地和仓库中，而先前的文章后续有时间再作整理和迁移。这篇写于2021年8月底，本人大四上学期开始前几天，算是一个大学与未来研究生生活承前启后的一个阶段，因此在该站点的这第一篇文章中打算记述一下前一段时间（保研，简要记述，详细内容以后有时间或者等完全结束再写）和之后的两个月内的一个大致的安排。 创建该站点第一篇博客的时间 简单说明一下2021年前八个月的情况到大三下学期，基本要确定未来的规划安排了，从寒假开始到大三下学期，一直焦虑于能否稳定保研名额，能否保到外校，因为没有经历过、信息源匮乏心态一直有些颓丧，同时还想做做考研和工作的准备，但到现在来看浪费那些时间基本没啥意义。从来没能准备周全，被各种事和人推着走。到6月底，随着计算机保研生的大流投了差不多15个左右的夏令营，毫无准备地同时应对夏令营活动和7月初的期末考试。6月20号左右由于没拿到西交的夏令营资格，使我将对夏令营的期望放到了能入营就是成功的程度上，也因此多投了很多中下游的985。后面半个月左右，是比较消耗精力的，总体上就是一个拼运气和心态的阶段。从6月25日之后，我陆续接到了北交cs、华师se、西工大cs、吉大ai、山大se、东北cs、中南cs、浙大se、南大se、本校、东南cs的入营通知，参加了其中一多半，最终也拿到了5个优营，这个结果对没啥追求的我来说已经算是确定了一些事了。后面这一个多月，总体上过得相当随性，所以即便还是有很多很久以前就想做去解决的事，到现在大四快开始了还没什么进展。纠结于保研与实习之中，在原地徘徊不定，致使现在的处境比较尴尬（hh 本来打算回家学车，结果因为暴雨和疫情一年都回不了家了，在学校每天待着浪费人生）现在也算是再做一次计划人，再做做后续的一些安排，搞搞心理建设。 个人的一些情况大学前三年学的东西太杂不够深入，也很少动手实践，因此实际现在对于编码面试的事还是不太敢尝试。总是想着必须重新建立一下技术体系，但基本没时间，也不敢去费时间去尝试。但现在的情况为今后考虑，不管是纯去做开发，还是搞几年研究，必须先把一门语言学到比较熟悉的程度。对本人来说，学了两年多java，周边技术知道不少，但很难做到随手编程实现和随口讲清相关的概念，基础相当薄弱，实践也不足，而java的相关知识是极多的，我也总是有些抗拒再头像大一时那样看起，总感觉浪法时间。但显然，越看一些概念，我越认识到我的基础到处是窟窿，不去拼一把真的是只能永远处于一个会做点简单应用但实际并不熟悉语言的程度。 先整理下hexo相关的8.27晚，经过测试我确认了： hexo editor可直接将复制的图片拷到本地对应目录下，可以直接在编辑器中显示，但上传时注意补充/images 博客主题更换 使用这位比我小三岁的大佬做的主题 https://nexmoe.com/ 更新hexo版本 参考 https://www.jianshu.com/p/98ac1e253e6e 配置gitalk https://www.cnblogs.com/bigyoung/p/14154060.html 本人第一个github账号的github.io之后作工作展示用 该账号是作日常生活学习记录用 技术体系重建（主要是java)计算机基础408相关 考研材料 面经上的问题背记 几本图解 数据结构的java实现 常用基本算法 leetcode整理 java基础 尚硅谷基础（集合异常等） 面试常考 南大se服务端开发 一入 石杉 juc并发编程 尚硅谷 大厂学院 os原理 jvm 大厂学院 框架 尚硅谷spring相关 spring全家桶 设计模式与框架模式源码解析 大厂学院 web基本技术 数据库 Mysql redis 消息队列 web基本技术 前端技术总体上，应先重点看三个部分： 计算机基础（数据结构与典型算法的多次实现 leetcode整理讲解）几本书+面经+复习资料 java基础回顾 宋+mb+面经 石杉经典问题 后续再针对各专项进入深入学习。 附相关资源 小马哥java https://ke.segmentfault.com/teacher/mercyblitz https://github.com/mercyblitzhttps://www.bilibili.com/video/BV1GT4y1P76R https://github.com/leiguorui/programming-video-tutorials 南大服务端开发 https://github.com/Software-Knowledge/2021-Server-Development 南大se git@github.com:NJU-SE-15-share-review/professional-class.git https://github.com/NJU-SE-15-share-review/professional-class 南大se笔记 https://github.com/stormbroken/SpriCoder-Notes 有配一下as环境的打算 几个南大se本科的up https://space.bilibili.com/349257951/video https://www.bilibili.com/video/BV1fh411U7KR/ taoci https://zhuanlan.zhihu.com/p/172476313 短期安排 文都几本过完 j/c面经过完 dsa稳定实现 dc数据结构整理类型 java基础 面经 + 尚 + mb 石杉","categories":[{"name":"规划","slug":"规划","permalink":"https://shadowbynl.github.io/categories/%E8%A7%84%E5%88%92/"}],"tags":[]}],"categories":[{"name":"java","slug":"java","permalink":"https://shadowbynl.github.io/categories/java/"},{"name":"大四","slug":"大四","permalink":"https://shadowbynl.github.io/categories/%E5%A4%A7%E5%9B%9B/"},{"name":"算法","slug":"算法","permalink":"https://shadowbynl.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"环境","slug":"环境","permalink":"https://shadowbynl.github.io/categories/%E7%8E%AF%E5%A2%83/"},{"name":"规划","slug":"规划","permalink":"https://shadowbynl.github.io/categories/%E8%A7%84%E5%88%92/"}],"tags":[{"name":"javase","slug":"javase","permalink":"https://shadowbynl.github.io/tags/javase/"}]}